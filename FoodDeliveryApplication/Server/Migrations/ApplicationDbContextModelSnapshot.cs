// <auto-generated />
using System;
using FoodDeliveryApplication.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodDeliveryApplication.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FoodDeliveryApplication.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "311 New Upper Changi Road, #B2-K1, Bedok Mall",
                            ContactNumber = "85699938",
                            Name = "Pezzo SG | Bedok Mall"
                        },
                        new
                        {
                            Id = 2,
                            Address = "53 Ang Mo Kio Ave 3, #B2-38, AMK Hub",
                            ContactNumber = "94673609",
                            Name = "Pezzo SG | AMK"
                        },
                        new
                        {
                            Id = 3,
                            Address = "50 Jurong Gateway Road, #B1-K07, Jem",
                            ContactNumber = "86085498",
                            Name = "Pezzo SG | Jem"
                        },
                        new
                        {
                            Id = 4,
                            Address = "23 Serangoon Central, #B2-67, NEX",
                            ContactNumber = "95560839",
                            Name = "Pezzo SG | NEX"
                        },
                        new
                        {
                            Id = 5,
                            Address = "1 Harbourfront Walk, #B2-K15, VivoCity",
                            ContactNumber = "80985858",
                            Name = "Pezzo SG | VivoCity"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactNumber = "98760962",
                            DateOfBirth = new DateTime(1980, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAddress = "509 Tampines Central 1, #20-2011",
                            EmailAddress = "thedesmondwong@geemail.com",
                            FirstName = "Desmond",
                            Gender = "Male",
                            LastName = "Wong"
                        },
                        new
                        {
                            Id = 2,
                            ContactNumber = "99761562",
                            DateOfBirth = new DateTime(1970, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAddress = "510 Tampines Central 1, #15-7099",
                            EmailAddress = "panglawrence@geemail.com",
                            FirstName = "Lawrence",
                            Gender = "Male",
                            LastName = "Pang"
                        },
                        new
                        {
                            Id = 3,
                            ContactNumber = "88880962",
                            DateOfBirth = new DateTime(1984, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAddress = "815 Tampines Avenue 4, #05-6077",
                            EmailAddress = "carrielim@hooya.com",
                            FirstName = "Carrie",
                            Gender = "Female",
                            LastName = "Lim"
                        },
                        new
                        {
                            Id = 4,
                            ContactNumber = "98767777",
                            DateOfBirth = new DateTime(1977, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAddress = "Hougang Avenue 7, #07-7777",
                            EmailAddress = "cheryltann@mailhot.com",
                            FirstName = "Cheryl",
                            Gender = "Female",
                            LastName = "Tan"
                        },
                        new
                        {
                            Id = 5,
                            ContactNumber = "99990962",
                            DateOfBirth = new DateTime(1996, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryAddress = "266 Serangoon Central Drive, #03-1111",
                            EmailAddress = "thomastan@inlook.com",
                            FirstName = "Thomas",
                            Gender = "Male",
                            LastName = "Tan"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StaffId");

                    b.ToTable("Deliveries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryAddress = "509 Tampines Central 1, #20-2011",
                            DeliveryDateTime = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 1
                        },
                        new
                        {
                            Id = 2,
                            DeliveryAddress = "510 Tampines Central 1, #15-7099",
                            DeliveryDateTime = new DateTime(2022, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 2
                        },
                        new
                        {
                            Id = 3,
                            DeliveryAddress = "815 Tampines Avenue 4, #05-6077",
                            DeliveryDateTime = new DateTime(2022, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 3
                        },
                        new
                        {
                            Id = 4,
                            DeliveryAddress = "Hougang Avenue 7, #07-7777",
                            DeliveryDateTime = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 4
                        },
                        new
                        {
                            Id = 5,
                            DeliveryAddress = "266 Serangoon Central Drive, #03-1111",
                            DeliveryDateTime = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 5
                        });
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 9.90m,
                            ImageUrl = "images/aloha.jpg",
                            Name = "Aloha",
                            Type = "Pizza"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 9.90m,
                            ImageUrl = "images/pepperoni.jpg",
                            Name = "Pepperoni",
                            Type = "Pizza"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 9.90m,
                            ImageUrl = "images/sanRemo.jpg",
                            Name = "San Remo",
                            Type = "Pizza"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 9.90m,
                            ImageUrl = "images/teriyakiChicken.jpg",
                            Name = "Teriyaki Chicken",
                            Type = "Pizza"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 2.90m,
                            ImageUrl = "images/cocaCola.png",
                            Name = "Coca-Cola",
                            Type = "Beverage"
                        },
                        new
                        {
                            Id = 6,
                            Cost = 2.90m,
                            ImageUrl = "images/greenTea.jpg",
                            Name = "Green Tea",
                            Type = "Beverage"
                        },
                        new
                        {
                            Id = 7,
                            Cost = 2.90m,
                            ImageUrl = "images/tea.jpg",
                            Name = "Hot Tea",
                            Type = "Beverage"
                        },
                        new
                        {
                            Id = 8,
                            Cost = 2.90m,
                            ImageUrl = "images/coffee.jpg",
                            Name = "Hot Coffee",
                            Type = "Beverage"
                        },
                        new
                        {
                            Id = 9,
                            Cost = 9.90m,
                            ImageUrl = "images/chocLavaCake.jpg",
                            Name = "Hot Chocolate Lava Cake",
                            Type = "Dessert"
                        },
                        new
                        {
                            Id = 10,
                            Cost = 8.90m,
                            ImageUrl = "images/tiramisu.jpg",
                            Name = "Tiramisu",
                            Type = "Dessert"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            CustomerId = 1,
                            OrderDateTime = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            CustomerId = 2,
                            OrderDateTime = new DateTime(2022, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 1,
                            CustomerId = 3,
                            OrderDateTime = new DateTime(2022, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 1,
                            CustomerId = 4,
                            OrderDateTime = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 1,
                            CustomerId = 5,
                            OrderDateTime = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MenuItemId = 1,
                            OrderId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            MenuItemId = 5,
                            OrderId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            MenuItemId = 1,
                            OrderId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            MenuItemId = 10,
                            OrderId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 5,
                            MenuItemId = 3,
                            OrderId = 3,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 6,
                            MenuItemId = 3,
                            OrderId = 4,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 7,
                            MenuItemId = 3,
                            OrderId = 5,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 22.70m,
                            OrderId = 1,
                            PaymentDateTime = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Credit Card"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 18.80m,
                            OrderId = 2,
                            PaymentDateTime = new DateTime(2022, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Debit Card"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 49.50m,
                            OrderId = 3,
                            PaymentDateTime = new DateTime(2022, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Debit Card"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 49.50m,
                            OrderId = 4,
                            PaymentDateTime = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Credit Card"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 49.50m,
                            OrderId = 5,
                            PaymentDateTime = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Credit Card"
                        });
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            ContactNumber = "98765432",
                            EmailAddress = "lisalim@geemail.com",
                            FirstName = "Lisa",
                            LastName = "Lim"
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 2,
                            ContactNumber = "99765433",
                            EmailAddress = "tanjacob@geemail.com",
                            FirstName = "Jacob",
                            LastName = "Tan"
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 3,
                            ContactNumber = "98744434",
                            EmailAddress = "jonaslim@geemail.com",
                            FirstName = "Jonas",
                            LastName = "Lim"
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 4,
                            ContactNumber = "98762222",
                            EmailAddress = "phuamatthew@geemail.com",
                            FirstName = "Matthew",
                            LastName = "Phua"
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 5,
                            ContactNumber = "98768882",
                            EmailAddress = "kwokowen@geemail.com",
                            FirstName = "Owen",
                            LastName = "Kwok"
                        });
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Delivery", b =>
                {
                    b.HasOne("FoodDeliveryApplication.Shared.Customer", null)
                        .WithMany("Deliveries")
                        .HasForeignKey("CustomerId");

                    b.HasOne("FoodDeliveryApplication.Shared.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApplication.Shared.Staff", null)
                        .WithMany("Deliveries")
                        .HasForeignKey("StaffId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Order", b =>
                {
                    b.HasOne("FoodDeliveryApplication.Shared.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApplication.Shared.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApplication.Shared.Staff", null)
                        .WithMany("Orders")
                        .HasForeignKey("StaffId");

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.OrderItem", b =>
                {
                    b.HasOne("FoodDeliveryApplication.Shared.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApplication.Shared.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Payment", b =>
                {
                    b.HasOne("FoodDeliveryApplication.Shared.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Staff", b =>
                {
                    b.HasOne("FoodDeliveryApplication.Shared.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodDeliveryApplication.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodDeliveryApplication.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodDeliveryApplication.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodDeliveryApplication.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Customer", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodDeliveryApplication.Shared.Staff", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
